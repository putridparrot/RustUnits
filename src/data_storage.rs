// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

///Data Storage conversion functions
pub mod data_storage {
	/// Bits conversion functions
	pub mod bits {
		/// Converts the supplied Bits value to Kilobits
		/// # Arguments
		/// * `value` - The Bits input value
		pub fn to_kilobits(value: f64) -> f64 {
			return value / 1000.0;
		}
		/// Converts the supplied Bits value to Megabits
		/// # Arguments
		/// * `value` - The Bits input value
		pub fn to_megabits(value: f64) -> f64 {
			return value / 1e+6;
		}
		/// Converts the supplied Bits value to Gigabits
		/// # Arguments
		/// * `value` - The Bits input value
		pub fn to_gigabits(value: f64) -> f64 {
			return value / 1e+9;
		}
		/// Converts the supplied Bits value to Terabits
		/// # Arguments
		/// * `value` - The Bits input value
		pub fn to_terabits(value: f64) -> f64 {
			return value / 1e+12;
		}
		/// Converts the supplied Bits value to Kilobytes
		/// # Arguments
		/// * `value` - The Bits input value
		pub fn to_kilobytes(value: f64) -> f64 {
			return value / 8000.0;
		}
		/// Converts the supplied Bits value to Megabytes
		/// # Arguments
		/// * `value` - The Bits input value
		pub fn to_megabytes(value: f64) -> f64 {
			return value / 8e+6;
		}
		/// Converts the supplied Bits value to Gigabytes
		/// # Arguments
		/// * `value` - The Bits input value
		pub fn to_gigabytes(value: f64) -> f64 {
			return value / 8e+9;
		}
		/// Converts the supplied Bits value to Terabytes
		/// # Arguments
		/// * `value` - The Bits input value
		pub fn to_terabytes(value: f64) -> f64 {
			return value / 8e+12;
		}
		/// Converts the supplied Bits value to Kibibits
		/// # Arguments
		/// * `value` - The Bits input value
		pub fn to_kibibits(value: f64) -> f64 {
			return value / 1024.0;
		}
		/// Converts the supplied Bits value to Mebibits
		/// # Arguments
		/// * `value` - The Bits input value
		pub fn to_mebibits(value: f64) -> f64 {
			return value / 1048576.0;
		}
	}
	/// Gigabits conversion functions
	pub mod gigabits {
		/// Converts the supplied Gigabits value to Bits
		/// # Arguments
		/// * `value` - The Gigabits input value
		pub fn to_bits(value: f64) -> f64 {
			return value * 1e+9;
		}
		/// Converts the supplied Gigabits value to Kilobits
		/// # Arguments
		/// * `value` - The Gigabits input value
		pub fn to_kilobits(value: f64) -> f64 {
			return value * 1e+6;
		}
		/// Converts the supplied Gigabits value to Megabits
		/// # Arguments
		/// * `value` - The Gigabits input value
		pub fn to_megabits(value: f64) -> f64 {
			return value * 1000.0;
		}
		/// Converts the supplied Gigabits value to Terabits
		/// # Arguments
		/// * `value` - The Gigabits input value
		pub fn to_terabits(value: f64) -> f64 {
			return value / 1000.0;
		}
		/// Converts the supplied Gigabits value to Kilobytes
		/// # Arguments
		/// * `value` - The Gigabits input value
		pub fn to_kilobytes(value: f64) -> f64 {
			return value * 125000.0;
		}
		/// Converts the supplied Gigabits value to Megabytes
		/// # Arguments
		/// * `value` - The Gigabits input value
		pub fn to_megabytes(value: f64) -> f64 {
			return value * 125.0;
		}
		/// Converts the supplied Gigabits value to Gigabytes
		/// # Arguments
		/// * `value` - The Gigabits input value
		pub fn to_gigabytes(value: f64) -> f64 {
			return value / 8.0;
		}
		/// Converts the supplied Gigabits value to Terabytes
		/// # Arguments
		/// * `value` - The Gigabits input value
		pub fn to_terabytes(value: f64) -> f64 {
			return value / 8000.0;
		}
		/// Converts the supplied Gigabits value to Kibibits
		/// # Arguments
		/// * `value` - The Gigabits input value
		pub fn to_kibibits(value: f64) -> f64 {
			return value * 976562.5;
		}
		/// Converts the supplied Gigabits value to Mebibits
		/// # Arguments
		/// * `value` - The Gigabits input value
		pub fn to_mebibits(value: f64) -> f64 {
			return value * 954.0;
		}
	}
	/// Gigabytes conversion functions
	pub mod gigabytes {
		/// Converts the supplied Gigabytes value to Bits
		/// # Arguments
		/// * `value` - The Gigabytes input value
		pub fn to_bits(value: f64) -> f64 {
			return value * 8e+9;
		}
		/// Converts the supplied Gigabytes value to Kilobits
		/// # Arguments
		/// * `value` - The Gigabytes input value
		pub fn to_kilobits(value: f64) -> f64 {
			return value * 8e+6;
		}
		/// Converts the supplied Gigabytes value to Megabits
		/// # Arguments
		/// * `value` - The Gigabytes input value
		pub fn to_megabits(value: f64) -> f64 {
			return value * 8000.0;
		}
		/// Converts the supplied Gigabytes value to Gigabits
		/// # Arguments
		/// * `value` - The Gigabytes input value
		pub fn to_gigabits(value: f64) -> f64 {
			return value * 8.0;
		}
		/// Converts the supplied Gigabytes value to Terabits
		/// # Arguments
		/// * `value` - The Gigabytes input value
		pub fn to_terabits(value: f64) -> f64 {
			return value / 125.0;
		}
		/// Converts the supplied Gigabytes value to Kilobytes
		/// # Arguments
		/// * `value` - The Gigabytes input value
		pub fn to_kilobytes(value: f64) -> f64 {
			return value * 1e+6;
		}
		/// Converts the supplied Gigabytes value to Megabytes
		/// # Arguments
		/// * `value` - The Gigabytes input value
		pub fn to_megabytes(value: f64) -> f64 {
			return value * 1000.0;
		}
		/// Converts the supplied Gigabytes value to Terabytes
		/// # Arguments
		/// * `value` - The Gigabytes input value
		pub fn to_terabytes(value: f64) -> f64 {
			return value / 1000.0;
		}
		/// Converts the supplied Gigabytes value to Kibibits
		/// # Arguments
		/// * `value` - The Gigabytes input value
		pub fn to_kibibits(value: f64) -> f64 {
			return value * 7812500.0;
		}
		/// Converts the supplied Gigabytes value to Mebibits
		/// # Arguments
		/// * `value` - The Gigabytes input value
		pub fn to_mebibits(value: f64) -> f64 {
			return value * 7629.39;
		}
	}
	/// Kibibits conversion functions
	pub mod kibibits {
		/// Converts the supplied Kibibits value to Bits
		/// # Arguments
		/// * `value` - The Kibibits input value
		pub fn to_bits(value: f64) -> f64 {
			return value * 1024.0;
		}
		/// Converts the supplied Kibibits value to Kilobits
		/// # Arguments
		/// * `value` - The Kibibits input value
		pub fn to_kilobits(value: f64) -> f64 {
			return value * 1.024;
		}
		/// Converts the supplied Kibibits value to Megabits
		/// # Arguments
		/// * `value` - The Kibibits input value
		pub fn to_megabits(value: f64) -> f64 {
			return value / 976.563;
		}
		/// Converts the supplied Kibibits value to Gigabits
		/// # Arguments
		/// * `value` - The Kibibits input value
		pub fn to_gigabits(value: f64) -> f64 {
			return value / 976562.5;
		}
		/// Converts the supplied Kibibits value to Terabits
		/// # Arguments
		/// * `value` - The Kibibits input value
		pub fn to_terabits(value: f64) -> f64 {
			return value / 976562500.0;
		}
		/// Converts the supplied Kibibits value to Kilobytes
		/// # Arguments
		/// * `value` - The Kibibits input value
		pub fn to_kilobytes(value: f64) -> f64 {
			return value / 7.812;
		}
		/// Converts the supplied Kibibits value to Megabytes
		/// # Arguments
		/// * `value` - The Kibibits input value
		pub fn to_megabytes(value: f64) -> f64 {
			return value / 7812.5;
		}
		/// Converts the supplied Kibibits value to Gigabytes
		/// # Arguments
		/// * `value` - The Kibibits input value
		pub fn to_gigabytes(value: f64) -> f64 {
			return value / 7812500.0;
		}
		/// Converts the supplied Kibibits value to Terabytes
		/// # Arguments
		/// * `value` - The Kibibits input value
		pub fn to_terabytes(value: f64) -> f64 {
			return value / 7812500000.0;
		}
		/// Converts the supplied Kibibits value to Mebibits
		/// # Arguments
		/// * `value` - The Kibibits input value
		pub fn to_mebibits(value: f64) -> f64 {
			return value / 1024.0;
		}
	}
	/// Kilobits conversion functions
	pub mod kilobits {
		/// Converts the supplied Kilobits value to Bits
		/// # Arguments
		/// * `value` - The Kilobits input value
		pub fn to_bits(value: f64) -> f64 {
			return value * 1000.0;
		}
		/// Converts the supplied Kilobits value to Megabits
		/// # Arguments
		/// * `value` - The Kilobits input value
		pub fn to_megabits(value: f64) -> f64 {
			return value / 1000.0;
		}
		/// Converts the supplied Kilobits value to Gigabits
		/// # Arguments
		/// * `value` - The Kilobits input value
		pub fn to_gigabits(value: f64) -> f64 {
			return value / 1e+6;
		}
		/// Converts the supplied Kilobits value to Terabits
		/// # Arguments
		/// * `value` - The Kilobits input value
		pub fn to_terabits(value: f64) -> f64 {
			return value / 1e+9;
		}
		/// Converts the supplied Kilobits value to Kilobytes
		/// # Arguments
		/// * `value` - The Kilobits input value
		pub fn to_kilobytes(value: f64) -> f64 {
			return value / 8.0;
		}
		/// Converts the supplied Kilobits value to Megabytes
		/// # Arguments
		/// * `value` - The Kilobits input value
		pub fn to_megabytes(value: f64) -> f64 {
			return value / 8000.0;
		}
		/// Converts the supplied Kilobits value to Gigabytes
		/// # Arguments
		/// * `value` - The Kilobits input value
		pub fn to_gigabytes(value: f64) -> f64 {
			return value / 8e+6;
		}
		/// Converts the supplied Kilobits value to Terabytes
		/// # Arguments
		/// * `value` - The Kilobits input value
		pub fn to_terabytes(value: f64) -> f64 {
			return value / 8e+9;
		}
		/// Converts the supplied Kilobits value to Kibibits
		/// # Arguments
		/// * `value` - The Kilobits input value
		pub fn to_kibibits(value: f64) -> f64 {
			return value / 1.024;
		}
		/// Converts the supplied Kilobits value to Mebibits
		/// # Arguments
		/// * `value` - The Kilobits input value
		pub fn to_mebibits(value: f64) -> f64 {
			return value / 1048.58;
		}
	}
	/// Kilobytes conversion functions
	pub mod kilobytes {
		/// Converts the supplied Kilobytes value to Bits
		/// # Arguments
		/// * `value` - The Kilobytes input value
		pub fn to_bits(value: f64) -> f64 {
			return value * 8000.0;
		}
		/// Converts the supplied Kilobytes value to Kilobits
		/// # Arguments
		/// * `value` - The Kilobytes input value
		pub fn to_kilobits(value: f64) -> f64 {
			return value * 8.0;
		}
		/// Converts the supplied Kilobytes value to Megabits
		/// # Arguments
		/// * `value` - The Kilobytes input value
		pub fn to_megabits(value: f64) -> f64 {
			return value / 125.0;
		}
		/// Converts the supplied Kilobytes value to Gigabits
		/// # Arguments
		/// * `value` - The Kilobytes input value
		pub fn to_gigabits(value: f64) -> f64 {
			return value / 125000.0;
		}
		/// Converts the supplied Kilobytes value to Terabits
		/// # Arguments
		/// * `value` - The Kilobytes input value
		pub fn to_terabits(value: f64) -> f64 {
			return value / 1.25e+8;
		}
		/// Converts the supplied Kilobytes value to Megabytes
		/// # Arguments
		/// * `value` - The Kilobytes input value
		pub fn to_megabytes(value: f64) -> f64 {
			return value / 1000.0;
		}
		/// Converts the supplied Kilobytes value to Gigabytes
		/// # Arguments
		/// * `value` - The Kilobytes input value
		pub fn to_gigabytes(value: f64) -> f64 {
			return value / 1e+6;
		}
		/// Converts the supplied Kilobytes value to Terabytes
		/// # Arguments
		/// * `value` - The Kilobytes input value
		pub fn to_terabytes(value: f64) -> f64 {
			return value / 1e+9;
		}
		/// Converts the supplied Kilobytes value to Kibibits
		/// # Arguments
		/// * `value` - The Kilobytes input value
		pub fn to_kibibits(value: f64) -> f64 {
			return value * 7.812;
		}
		/// Converts the supplied Kilobytes value to Mebibits
		/// # Arguments
		/// * `value` - The Kilobytes input value
		pub fn to_mebibits(value: f64) -> f64 {
			return value * 0.00762939;
		}
	}
	/// Mebibits conversion functions
	pub mod mebibits {
		/// Converts the supplied Mebibits value to Bits
		/// # Arguments
		/// * `value` - The Mebibits input value
		pub fn to_bits(value: f64) -> f64 {
			return value * 1048576.0;
		}
		/// Converts the supplied Mebibits value to Kilobits
		/// # Arguments
		/// * `value` - The Mebibits input value
		pub fn to_kilobits(value: f64) -> f64 {
			return value * 1048.58;
		}
		/// Converts the supplied Mebibits value to Megabits
		/// # Arguments
		/// * `value` - The Mebibits input value
		pub fn to_megabits(value: f64) -> f64 {
			return value * 1.04858;
		}
		/// Converts the supplied Mebibits value to Gigabits
		/// # Arguments
		/// * `value` - The Mebibits input value
		pub fn to_gigabits(value: f64) -> f64 {
			return value / 954.0;
		}
		/// Converts the supplied Mebibits value to Terabits
		/// # Arguments
		/// * `value` - The Mebibits input value
		pub fn to_terabits(value: f64) -> f64 {
			return value / 953674.0;
		}
		/// Converts the supplied Mebibits value to Kilobytes
		/// # Arguments
		/// * `value` - The Mebibits input value
		pub fn to_kilobytes(value: f64) -> f64 {
			return value / 0.00762939;
		}
		/// Converts the supplied Mebibits value to Megabytes
		/// # Arguments
		/// * `value` - The Mebibits input value
		pub fn to_megabytes(value: f64) -> f64 {
			return value / 7.62939;
		}
		/// Converts the supplied Mebibits value to Gigabytes
		/// # Arguments
		/// * `value` - The Mebibits input value
		pub fn to_gigabytes(value: f64) -> f64 {
			return value / 7629.39;
		}
		/// Converts the supplied Mebibits value to Terabytes
		/// # Arguments
		/// * `value` - The Mebibits input value
		pub fn to_terabytes(value: f64) -> f64 {
			return value * 0.000000131072;
		}
		/// Converts the supplied Mebibits value to Kibibits
		/// # Arguments
		/// * `value` - The Mebibits input value
		pub fn to_kibibits(value: f64) -> f64 {
			return value * 1024.0;
		}
	}
	/// Megabits conversion functions
	pub mod megabits {
		/// Converts the supplied Megabits value to Bits
		/// # Arguments
		/// * `value` - The Megabits input value
		pub fn to_bits(value: f64) -> f64 {
			return value * 1e+6;
		}
		/// Converts the supplied Megabits value to Kilobits
		/// # Arguments
		/// * `value` - The Megabits input value
		pub fn to_kilobits(value: f64) -> f64 {
			return value * 1000.0;
		}
		/// Converts the supplied Megabits value to Gigabits
		/// # Arguments
		/// * `value` - The Megabits input value
		pub fn to_gigabits(value: f64) -> f64 {
			return value / 1000.0;
		}
		/// Converts the supplied Megabits value to Terabits
		/// # Arguments
		/// * `value` - The Megabits input value
		pub fn to_terabits(value: f64) -> f64 {
			return value / 1e+6;
		}
		/// Converts the supplied Megabits value to Kilobytes
		/// # Arguments
		/// * `value` - The Megabits input value
		pub fn to_kilobytes(value: f64) -> f64 {
			return value * 125.0;
		}
		/// Converts the supplied Megabits value to Megabytes
		/// # Arguments
		/// * `value` - The Megabits input value
		pub fn to_megabytes(value: f64) -> f64 {
			return value / 8.0;
		}
		/// Converts the supplied Megabits value to Gigabytes
		/// # Arguments
		/// * `value` - The Megabits input value
		pub fn to_gigabytes(value: f64) -> f64 {
			return value / 8000.0;
		}
		/// Converts the supplied Megabits value to Terabytes
		/// # Arguments
		/// * `value` - The Megabits input value
		pub fn to_terabytes(value: f64) -> f64 {
			return value / 8e+6;
		}
		/// Converts the supplied Megabits value to Kibibits
		/// # Arguments
		/// * `value` - The Megabits input value
		pub fn to_kibibits(value: f64) -> f64 {
			return value * 976.563;
		}
		/// Converts the supplied Megabits value to Mebibits
		/// # Arguments
		/// * `value` - The Megabits input value
		pub fn to_mebibits(value: f64) -> f64 {
			return value / 1.04858;
		}
	}
	/// Megabytes conversion functions
	pub mod megabytes {
		/// Converts the supplied Megabytes value to Bits
		/// # Arguments
		/// * `value` - The Megabytes input value
		pub fn to_bits(value: f64) -> f64 {
			return value * 8e+6;
		}
		/// Converts the supplied Megabytes value to Kilobits
		/// # Arguments
		/// * `value` - The Megabytes input value
		pub fn to_kilobits(value: f64) -> f64 {
			return value * 8000.0;
		}
		/// Converts the supplied Megabytes value to Megabits
		/// # Arguments
		/// * `value` - The Megabytes input value
		pub fn to_megabits(value: f64) -> f64 {
			return value * 8.0;
		}
		/// Converts the supplied Megabytes value to Gigabits
		/// # Arguments
		/// * `value` - The Megabytes input value
		pub fn to_gigabits(value: f64) -> f64 {
			return value / 125.0;
		}
		/// Converts the supplied Megabytes value to Terabits
		/// # Arguments
		/// * `value` - The Megabytes input value
		pub fn to_terabits(value: f64) -> f64 {
			return value / 125000.0;
		}
		/// Converts the supplied Megabytes value to Kilobytes
		/// # Arguments
		/// * `value` - The Megabytes input value
		pub fn to_kilobytes(value: f64) -> f64 {
			return value * 1000.0;
		}
		/// Converts the supplied Megabytes value to Gigabytes
		/// # Arguments
		/// * `value` - The Megabytes input value
		pub fn to_gigabytes(value: f64) -> f64 {
			return value / 1000.0;
		}
		/// Converts the supplied Megabytes value to Terabytes
		/// # Arguments
		/// * `value` - The Megabytes input value
		pub fn to_terabytes(value: f64) -> f64 {
			return value / 1e+6;
		}
		/// Converts the supplied Megabytes value to Kibibits
		/// # Arguments
		/// * `value` - The Megabytes input value
		pub fn to_kibibits(value: f64) -> f64 {
			return value * 7812.5;
		}
		/// Converts the supplied Megabytes value to Mebibits
		/// # Arguments
		/// * `value` - The Megabytes input value
		pub fn to_mebibits(value: f64) -> f64 {
			return value * 7.62939;
		}
	}
	/// Terabits conversion functions
	pub mod terabits {
		/// Converts the supplied Terabits value to Bits
		/// # Arguments
		/// * `value` - The Terabits input value
		pub fn to_bits(value: f64) -> f64 {
			return value * 1e+12;
		}
		/// Converts the supplied Terabits value to Kilobits
		/// # Arguments
		/// * `value` - The Terabits input value
		pub fn to_kilobits(value: f64) -> f64 {
			return value * 1e+9;
		}
		/// Converts the supplied Terabits value to Megabits
		/// # Arguments
		/// * `value` - The Terabits input value
		pub fn to_megabits(value: f64) -> f64 {
			return value * 1e+6;
		}
		/// Converts the supplied Terabits value to Gigabits
		/// # Arguments
		/// * `value` - The Terabits input value
		pub fn to_gigabits(value: f64) -> f64 {
			return value * 1000.0;
		}
		/// Converts the supplied Terabits value to Kilobytes
		/// # Arguments
		/// * `value` - The Terabits input value
		pub fn to_kilobytes(value: f64) -> f64 {
			return value * 1.25e+8;
		}
		/// Converts the supplied Terabits value to Megabytes
		/// # Arguments
		/// * `value` - The Terabits input value
		pub fn to_megabytes(value: f64) -> f64 {
			return value * 125000.0;
		}
		/// Converts the supplied Terabits value to Gigabytes
		/// # Arguments
		/// * `value` - The Terabits input value
		pub fn to_gigabytes(value: f64) -> f64 {
			return value * 125.0;
		}
		/// Converts the supplied Terabits value to Terabytes
		/// # Arguments
		/// * `value` - The Terabits input value
		pub fn to_terabytes(value: f64) -> f64 {
			return value / 8.0;
		}
		/// Converts the supplied Terabits value to Kibibits
		/// # Arguments
		/// * `value` - The Terabits input value
		pub fn to_kibibits(value: f64) -> f64 {
			return value * 976562500.0;
		}
		/// Converts the supplied Terabits value to Mebibits
		/// # Arguments
		/// * `value` - The Terabits input value
		pub fn to_mebibits(value: f64) -> f64 {
			return value * 953674.0;
		}
	}
	/// Terabytes conversion functions
	pub mod terabytes {
		/// Converts the supplied Terabytes value to Bits
		/// # Arguments
		/// * `value` - The Terabytes input value
		pub fn to_bits(value: f64) -> f64 {
			return value * 8e+12;
		}
		/// Converts the supplied Terabytes value to Kilobits
		/// # Arguments
		/// * `value` - The Terabytes input value
		pub fn to_kilobits(value: f64) -> f64 {
			return value * 8e+9;
		}
		/// Converts the supplied Terabytes value to Megabits
		/// # Arguments
		/// * `value` - The Terabytes input value
		pub fn to_megabits(value: f64) -> f64 {
			return value * 8e+6;
		}
		/// Converts the supplied Terabytes value to Gigabits
		/// # Arguments
		/// * `value` - The Terabytes input value
		pub fn to_gigabits(value: f64) -> f64 {
			return value * 8000.0;
		}
		/// Converts the supplied Terabytes value to Terabits
		/// # Arguments
		/// * `value` - The Terabytes input value
		pub fn to_terabits(value: f64) -> f64 {
			return value * 8.0;
		}
		/// Converts the supplied Terabytes value to Kilobytes
		/// # Arguments
		/// * `value` - The Terabytes input value
		pub fn to_kilobytes(value: f64) -> f64 {
			return value * 1e+9;
		}
		/// Converts the supplied Terabytes value to Megabytes
		/// # Arguments
		/// * `value` - The Terabytes input value
		pub fn to_megabytes(value: f64) -> f64 {
			return value * 1e+6;
		}
		/// Converts the supplied Terabytes value to Gigabytes
		/// # Arguments
		/// * `value` - The Terabytes input value
		pub fn to_gigabytes(value: f64) -> f64 {
			return value * 1000.0;
		}
		/// Converts the supplied Terabytes value to Kibibits
		/// # Arguments
		/// * `value` - The Terabytes input value
		pub fn to_kibibits(value: f64) -> f64 {
			return value * 7812500000.0;
		}
		/// Converts the supplied Terabytes value to Mebibits
		/// # Arguments
		/// * `value` - The Terabytes input value
		pub fn to_mebibits(value: f64) -> f64 {
			return value / 0.000000131072;
		}
	}
}
