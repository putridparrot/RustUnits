// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

//! # Length based converters

/// Centimetres conversion functions
pub mod centimetres {
	/// Converts the supplied Centimetres value to Millimetres
	/// # Arguments
	/// * `value` - The Centimetres input value
	pub fn to_millimetres(value: f64) -> f64 {
		return value * 10.0;
	}
	/// Converts the supplied Centimetres value to Metres
	/// # Arguments
	/// * `value` - The Centimetres input value
	pub fn to_metres(value: f64) -> f64 {
		return value / 100.0;
	}
	/// Converts the supplied Centimetres value to Kilometres
	/// # Arguments
	/// * `value` - The Centimetres input value
	pub fn to_kilometres(value: f64) -> f64 {
		return value / 100000.0;
	}
	/// Converts the supplied Centimetres value to Inches
	/// # Arguments
	/// * `value` - The Centimetres input value
	pub fn to_inches(value: f64) -> f64 {
		return value / 2.54;
	}
	/// Converts the supplied Centimetres value to Feet
	/// # Arguments
	/// * `value` - The Centimetres input value
	pub fn to_feet(value: f64) -> f64 {
		return value / 30.48;
	}
	/// Converts the supplied Centimetres value to Yards
	/// # Arguments
	/// * `value` - The Centimetres input value
	pub fn to_yards(value: f64) -> f64 {
		return value / 91.44;
	}
	/// Converts the supplied Centimetres value to Miles
	/// # Arguments
	/// * `value` - The Centimetres input value
	pub fn to_miles(value: f64) -> f64 {
		return value / 160934.4;
	}
	/// Converts the supplied Centimetres value to Nautical Miles
	/// # Arguments
	/// * `value` - The Centimetres input value
	pub fn to_nautical_miles(value: f64) -> f64 {
		return value / 185200.0;
	}
}
/// Feet conversion functions
pub mod feet {
	/// Converts the supplied Feet value to Millimetres
	/// # Arguments
	/// * `value` - The Feet input value
	pub fn to_millimetres(value: f64) -> f64 {
		return value * 304.8;
	}
	/// Converts the supplied Feet value to Centimetres
	/// # Arguments
	/// * `value` - The Feet input value
	pub fn to_centimetres(value: f64) -> f64 {
		return value * 30.48;
	}
	/// Converts the supplied Feet value to Metres
	/// # Arguments
	/// * `value` - The Feet input value
	pub fn to_metres(value: f64) -> f64 {
		return value * 0.3048;
	}
	/// Converts the supplied Feet value to Kilometres
	/// # Arguments
	/// * `value` - The Feet input value
	pub fn to_kilometres(value: f64) -> f64 {
		return value * 0.0003048;
	}
	/// Converts the supplied Feet value to Inches
	/// # Arguments
	/// * `value` - The Feet input value
	pub fn to_inches(value: f64) -> f64 {
		return value * 12.0;
	}
	/// Converts the supplied Feet value to Yards
	/// # Arguments
	/// * `value` - The Feet input value
	pub fn to_yards(value: f64) -> f64 {
		return value / 3.0;
	}
	/// Converts the supplied Feet value to Miles
	/// # Arguments
	/// * `value` - The Feet input value
	pub fn to_miles(value: f64) -> f64 {
		return value / 5280.0;
	}
	/// Converts the supplied Feet value to Nautical Miles
	/// # Arguments
	/// * `value` - The Feet input value
	pub fn to_nautical_miles(value: f64) -> f64 {
		return value / 6076.12;
	}
}
/// Inches conversion functions
pub mod inches {
	/// Converts the supplied Inches value to Millimetres
	/// # Arguments
	/// * `value` - The Inches input value
	pub fn to_millimetres(value: f64) -> f64 {
		return value * 25.4;
	}
	/// Converts the supplied Inches value to Centimetres
	/// # Arguments
	/// * `value` - The Inches input value
	pub fn to_centimetres(value: f64) -> f64 {
		return value * 2.54;
	}
	/// Converts the supplied Inches value to Metres
	/// # Arguments
	/// * `value` - The Inches input value
	pub fn to_metres(value: f64) -> f64 {
		return value / 39.37007874;
	}
	/// Converts the supplied Inches value to Kilometres
	/// # Arguments
	/// * `value` - The Inches input value
	pub fn to_kilometres(value: f64) -> f64 {
		return value / 39370.07874;
	}
	/// Converts the supplied Inches value to Feet
	/// # Arguments
	/// * `value` - The Inches input value
	pub fn to_feet(value: f64) -> f64 {
		return value / 12.0;
	}
	/// Converts the supplied Inches value to Yards
	/// # Arguments
	/// * `value` - The Inches input value
	pub fn to_yards(value: f64) -> f64 {
		return value / 36.0;
	}
	/// Converts the supplied Inches value to Miles
	/// # Arguments
	/// * `value` - The Inches input value
	pub fn to_miles(value: f64) -> f64 {
		return value / 63360.0;
	}
	/// Converts the supplied Inches value to Nautical Miles
	/// # Arguments
	/// * `value` - The Inches input value
	pub fn to_nautical_miles(value: f64) -> f64 {
		return value / 72913.4;
	}
}
/// Kilometres conversion functions
pub mod kilometres {
	/// Converts the supplied Kilometres value to Millimetres
	/// # Arguments
	/// * `value` - The Kilometres input value
	pub fn to_millimetres(value: f64) -> f64 {
		return value * 1000000.0;
	}
	/// Converts the supplied Kilometres value to Centimetres
	/// # Arguments
	/// * `value` - The Kilometres input value
	pub fn to_centimetres(value: f64) -> f64 {
		return value * 100000.0;
	}
	/// Converts the supplied Kilometres value to Metres
	/// # Arguments
	/// * `value` - The Kilometres input value
	pub fn to_metres(value: f64) -> f64 {
		return value * 1000.0;
	}
	/// Converts the supplied Kilometres value to Inches
	/// # Arguments
	/// * `value` - The Kilometres input value
	pub fn to_inches(value: f64) -> f64 {
		return value * 39370.07874;
	}
	/// Converts the supplied Kilometres value to Feet
	/// # Arguments
	/// * `value` - The Kilometres input value
	pub fn to_feet(value: f64) -> f64 {
		return value / 0.0003048;
	}
	/// Converts the supplied Kilometres value to Yards
	/// # Arguments
	/// * `value` - The Kilometres input value
	pub fn to_yards(value: f64) -> f64 {
		return value / 0.0009144;
	}
	/// Converts the supplied Kilometres value to Miles
	/// # Arguments
	/// * `value` - The Kilometres input value
	pub fn to_miles(value: f64) -> f64 {
		return value / 1.609344;
	}
	/// Converts the supplied Kilometres value to Nautical Miles
	/// # Arguments
	/// * `value` - The Kilometres input value
	pub fn to_nautical_miles(value: f64) -> f64 {
		return value / 1.85200;
	}
}
/// Metres conversion functions
pub mod metres {
	/// Converts the supplied Metres value to Millimetres
	/// # Arguments
	/// * `value` - The Metres input value
	pub fn to_millimetres(value: f64) -> f64 {
		return value * 1000.0;
	}
	/// Converts the supplied Metres value to Centimetres
	/// # Arguments
	/// * `value` - The Metres input value
	pub fn to_centimetres(value: f64) -> f64 {
		return value * 100.0;
	}
	/// Converts the supplied Metres value to Kilometres
	/// # Arguments
	/// * `value` - The Metres input value
	pub fn to_kilometres(value: f64) -> f64 {
		return value / 1000.0;
	}
	/// Converts the supplied Metres value to Inches
	/// # Arguments
	/// * `value` - The Metres input value
	pub fn to_inches(value: f64) -> f64 {
		return value * 39.37007874;
	}
	/// Converts the supplied Metres value to Feet
	/// # Arguments
	/// * `value` - The Metres input value
	pub fn to_feet(value: f64) -> f64 {
		return value / 0.3048;
	}
	/// Converts the supplied Metres value to Yards
	/// # Arguments
	/// * `value` - The Metres input value
	pub fn to_yards(value: f64) -> f64 {
		return value / 0.9144;
	}
	/// Converts the supplied Metres value to Miles
	/// # Arguments
	/// * `value` - The Metres input value
	pub fn to_miles(value: f64) -> f64 {
		return value / 1609.344;
	}
	/// Converts the supplied Metres value to Nautical Miles
	/// # Arguments
	/// * `value` - The Metres input value
	pub fn to_nautical_miles(value: f64) -> f64 {
		return value / 1852.0;
	}
}
/// Miles conversion functions
pub mod miles {
	/// Converts the supplied Miles value to Millimetres
	/// # Arguments
	/// * `value` - The Miles input value
	pub fn to_millimetres(value: f64) -> f64 {
		return value * 1609344.0;
	}
	/// Converts the supplied Miles value to Centimetres
	/// # Arguments
	/// * `value` - The Miles input value
	pub fn to_centimetres(value: f64) -> f64 {
		return value * 160934.4;
	}
	/// Converts the supplied Miles value to Metres
	/// # Arguments
	/// * `value` - The Miles input value
	pub fn to_metres(value: f64) -> f64 {
		return value * 1609.344;
	}
	/// Converts the supplied Miles value to Kilometres
	/// # Arguments
	/// * `value` - The Miles input value
	pub fn to_kilometres(value: f64) -> f64 {
		return value * 1.609344;
	}
	/// Converts the supplied Miles value to Inches
	/// # Arguments
	/// * `value` - The Miles input value
	pub fn to_inches(value: f64) -> f64 {
		return value * 63360.0;
	}
	/// Converts the supplied Miles value to Feet
	/// # Arguments
	/// * `value` - The Miles input value
	pub fn to_feet(value: f64) -> f64 {
		return value * 5280.0;
	}
	/// Converts the supplied Miles value to Yards
	/// # Arguments
	/// * `value` - The Miles input value
	pub fn to_yards(value: f64) -> f64 {
		return value * 1760.0;
	}
	/// Converts the supplied Miles value to Nautical Miles
	/// # Arguments
	/// * `value` - The Miles input value
	pub fn to_nautical_miles(value: f64) -> f64 {
		return value / 1.15078;
	}
}
/// Millimetres conversion functions
pub mod millimetres {
	/// Converts the supplied Millimetres value to Centimetres
	/// # Arguments
	/// * `value` - The Millimetres input value
	pub fn to_centimetres(value: f64) -> f64 {
		return value / 10.0;
	}
	/// Converts the supplied Millimetres value to Metres
	/// # Arguments
	/// * `value` - The Millimetres input value
	pub fn to_metres(value: f64) -> f64 {
		return value / 1000.0;
	}
	/// Converts the supplied Millimetres value to Kilometres
	/// # Arguments
	/// * `value` - The Millimetres input value
	pub fn to_kilometres(value: f64) -> f64 {
		return value / 1000000.0;
	}
	/// Converts the supplied Millimetres value to Inches
	/// # Arguments
	/// * `value` - The Millimetres input value
	pub fn to_inches(value: f64) -> f64 {
		return value / 25.4;
	}
	/// Converts the supplied Millimetres value to Feet
	/// # Arguments
	/// * `value` - The Millimetres input value
	pub fn to_feet(value: f64) -> f64 {
		return value / 304.8;
	}
	/// Converts the supplied Millimetres value to Yards
	/// # Arguments
	/// * `value` - The Millimetres input value
	pub fn to_yards(value: f64) -> f64 {
		return value / 914.4;
	}
	/// Converts the supplied Millimetres value to Miles
	/// # Arguments
	/// * `value` - The Millimetres input value
	pub fn to_miles(value: f64) -> f64 {
		return value / 1609344.0;
	}
	/// Converts the supplied Millimetres value to Nautical Miles
	/// # Arguments
	/// * `value` - The Millimetres input value
	pub fn to_nautical_miles(value: f64) -> f64 {
		return value / 1852000.0;
	}
}
/// Nautical Miles conversion functions
pub mod nautical_miles {
	/// Converts the supplied Nautical Miles value to Millimetres
	/// # Arguments
	/// * `value` - The Nautical Miles input value
	pub fn to_millimetres(value: f64) -> f64 {
		return value * 1852000.0;
	}
	/// Converts the supplied Nautical Miles value to Centimetres
	/// # Arguments
	/// * `value` - The Nautical Miles input value
	pub fn to_centimetres(value: f64) -> f64 {
		return value * 185200.0;
	}
	/// Converts the supplied Nautical Miles value to Metres
	/// # Arguments
	/// * `value` - The Nautical Miles input value
	pub fn to_metres(value: f64) -> f64 {
		return value * 1852.0;
	}
	/// Converts the supplied Nautical Miles value to Kilometres
	/// # Arguments
	/// * `value` - The Nautical Miles input value
	pub fn to_kilometres(value: f64) -> f64 {
		return value * 1.85200;
	}
	/// Converts the supplied Nautical Miles value to Inches
	/// # Arguments
	/// * `value` - The Nautical Miles input value
	pub fn to_inches(value: f64) -> f64 {
		return value * 72913.4;
	}
	/// Converts the supplied Nautical Miles value to Feet
	/// # Arguments
	/// * `value` - The Nautical Miles input value
	pub fn to_feet(value: f64) -> f64 {
		return value * 6076.12;
	}
	/// Converts the supplied Nautical Miles value to Yards
	/// # Arguments
	/// * `value` - The Nautical Miles input value
	pub fn to_yards(value: f64) -> f64 {
		return value * 2025.37;
	}
	/// Converts the supplied Nautical Miles value to Miles
	/// # Arguments
	/// * `value` - The Nautical Miles input value
	pub fn to_miles(value: f64) -> f64 {
		return value * 1.15078;
	}
}
/// Yards conversion functions
pub mod yards {
	/// Converts the supplied Yards value to Millimetres
	/// # Arguments
	/// * `value` - The Yards input value
	pub fn to_millimetres(value: f64) -> f64 {
		return value * 914.4;
	}
	/// Converts the supplied Yards value to Centimetres
	/// # Arguments
	/// * `value` - The Yards input value
	pub fn to_centimetres(value: f64) -> f64 {
		return value * 91.44;
	}
	/// Converts the supplied Yards value to Metres
	/// # Arguments
	/// * `value` - The Yards input value
	pub fn to_metres(value: f64) -> f64 {
		return value * 0.9144;
	}
	/// Converts the supplied Yards value to Kilometres
	/// # Arguments
	/// * `value` - The Yards input value
	pub fn to_kilometres(value: f64) -> f64 {
		return value * 0.0009144;
	}
	/// Converts the supplied Yards value to Inches
	/// # Arguments
	/// * `value` - The Yards input value
	pub fn to_inches(value: f64) -> f64 {
		return value * 36.0;
	}
	/// Converts the supplied Yards value to Feet
	/// # Arguments
	/// * `value` - The Yards input value
	pub fn to_feet(value: f64) -> f64 {
		return value * 3.0;
	}
	/// Converts the supplied Yards value to Miles
	/// # Arguments
	/// * `value` - The Yards input value
	pub fn to_miles(value: f64) -> f64 {
		return value / 1760.0;
	}
	/// Converts the supplied Yards value to Nautical Miles
	/// # Arguments
	/// * `value` - The Yards input value
	pub fn to_nautical_miles(value: f64) -> f64 {
		return value / 2025.37;
	}
}
